// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Appointment {
  id                Int       @id @default(autoincrement())
  dateTime          DateTime
  userId            String?
  clientName        String?
  serviceId         Int?
  serviceOptionId   Int?
  serviceName       String?   @db.VarChar(255)
  serviceOptionName String?   @db.VarChar(255)
  status            Status    @default(AVAILABLE)
  bookedAt          DateTime?
  rescheduledAt     DateTime?
  servicePrice      Float?
  adminNote         String?   @db.VarChar(500)

  client        User?          @relation(fields: [userId], references: [id])
  service       Service?       @relation(fields: [serviceId], references: [id])
  serviceOption ServiceOption? @relation(fields: [serviceOptionId], references: [id])
}

enum Status {
  AVAILABLE
  BOOKED
  UNAVAILABLE
}

model Service {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  description_en String
  description_fi String
  imageUrl       String
  serviceOptions ServiceOption[]
  appointments   Appointment[]
}

model ServiceOption {
  id             Int           @id @default(autoincrement())
  name_en        String        @db.VarChar(255)
  name_fi        String        @db.VarChar(255)
  price          Float
  description_en String
  description_fi String
  serviceId      Int
  appointments   Appointment[]

  service Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  hashedPassword String
  firstName      String
  lastName       String
  phone          String
  isAdmin        Boolean       @default(false)
  appointments   Appointment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
