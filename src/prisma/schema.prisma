// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Appointment {
  id              Int      @id @default(autoincrement())
  date            DateTime @db.Date
  time            DateTime @db.Time()
  serviceId       Int?
  serviceOptionId Int?
  clientName      String?  @db.VarChar(255)
  clientEmail     String?  @db.VarChar(255)
  clientPhone     String?  @db.VarChar(255)
  comment         String?  @db.Text()
  status          Status   @default(AVAILABLE)

  service       Service?       @relation(fields: [serviceId], references: [id])
  serviceOption ServiceOption? @relation(fields: [serviceOptionId], references: [id])
}

enum Status {
  AVAILABLE
  BOOKED
  UNAVAILABLE
}

model Service {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String?
  imageUrl    String?

  serviceOptions ServiceOption[]
  appointments   Appointment[]
}

model ServiceOption {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  price       Float
  description String?
  serviceId   Int

  appointments Appointment[]
  service      Service?      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String  @id @default(cuid())
  email          String  @unique
  hashedPassword String
  name           String
  phone          String
  isAdmin        Boolean @default(false)

  Account Account[]
  Session Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
